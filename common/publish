#!/bin/bash
#
set -e

source ./setup_environment

export PUBLISH_COMMON_DIR=../common/
#set defaults for some optional variables
if [ -z "$PROJECT_RELEASE_NAME" ]; then
	export PROJECT_RELEASE_NAME=${PROJECT_NAME}
fi
if [ -z "$PROJECT_IMAGE_FILESTEM" ]; then
	export PROJECT_IMAGE_FILESTEM=fluke-full-image-${PROJECT_MACHINE}
fi

echo "Getting images from the deploy archive."
${PUBLISH_COMMON_DIR}getImages
echo "done!"

#echo "Customizing the target directory."
#./targetify
#echo "done!"

echo "Building the rootfs image."
if [ ! -d "./rootfs" ]; then
    mkdir ./rootfs
fi
if [ ! -d "./targetAux" ]; then
    mkdir ./targetAux
fi

echo "Building composite flash images."
if [ -n "$EMMC_ROOTFS" ] && [ "$EMMC_ROOTFS" -ne 0 ]
then
	/usr/bin/srec_cat \
	./loader/U-boot/u-boot-with-spl.sfp -Binary \
	./DeviceTree/${PROJECT_NAME}_soc.dtb -Binary -Offset 0x00110000 \
	./kernel/zImage -Binary -Offset 0x00200000 \
	./fpga/${PROJECT_NAME}_OG.rbf -Binary -Offset 0x00800000 \
	./kernel/fluke-initrd-image-${PROJECT_MACHINE}.ext4.gz -Binary -Offset 0x01000000 \
	./loader/U-boot/u-boot-with-spl.sfp -Binary -Offset 0x02000000 \
	./DeviceTree/${PROJECT_NAME}_soc.dtb -Binary -Offset 0x02110000 \
	./kernel/zImage -Binary -Offset 0x02200000 \
	./fpga/${PROJECT_NAME}_OG.rbf -Binary -Offset 0x02800000 \
	./kernel/fluke-initrd-image-${PROJECT_MACHINE}.ext4.gz -Binary -Offset 0x03000000 \
	-Output ./rootfs/U10.flash -Motorola --address-length=4 -Data_Only
    echo "EMMC **************************************************************************"
else
	/usr/bin/srec_cat \
	./loader/U-boot/u-boot-with-spl.sfp -Binary \
	./DeviceTree/${PROJECT_NAME}_soc.dtb -Binary -Offset 0x00110000 \
	./kernel/zImage -Binary -Offset 0x00200000 \
	./fpga/${PROJECT_NAME}_OG.rbf -Binary -Offset 0x0800000 \
	-Output ./rootfs/U10.flash -Motorola --address-length=4 -Data_Only
fi

# Create binary image from Motorola S-Record.  Fill blank spaces
# with 0xff instead of 0x00.
/usr/bin/srec_cat ./rootfs/U10.flash -Motorola \
-Fill 0xff -over ./rootfs/U10.flash \
-Output ./rootfs/U10.bin -Binary
echo "U10 done!"
echo "Composite images created!"

BUILD_DATE=$(date +"%y_%m_%d")
RELEASE_FOLDER=${BUILD_DATE}_${PROJECT_RELEASE_NAME}
echo "Building release folder "$RELEASE_FOLDER

install -d ./release/$RELEASE_FOLDER/toolchain
install -d ./release/$RELEASE_FOLDER/zImage
install -d ./release/$RELEASE_FOLDER/rootfs
install -d ./release/$RELEASE_FOLDER/fpga
install -d ./release/$RELEASE_FOLDER/U10
install -d ./release/$RELEASE_FOLDER/U11
install -d ./release/$RELEASE_FOLDER/loader
#install -d ./release/$RELEASE_FOLDER/devicetree

cp -Rp ./toolchain/* ./release/${RELEASE_FOLDER}/toolchain/ 
cp -Rp ./DeviceTree ./release/${RELEASE_FOLDER}/.
cp -Rp ./loader ./release/${RELEASE_FOLDER}/.
cp -p ./kernel/zImage ./release/${RELEASE_FOLDER}/zImage/. 
if [ -n "$EMMC_ROOTFS" ] && [ "$EMMC_ROOTFS" -ne 0 ]
then
	cp -p $PROJECT_IMAGES/${PROJECT_IMAGE_FILESTEM}.wic.gz ./release/${RELEASE_FOLDER}/rootfs/
	cp -p ./kernel/fluke-initrd-image-${PROJECT_MACHINE}.ext4.gz ./release/${RELEASE_FOLDER}/zImage/.
else
	cp -p $PROJECT_IMAGES/${PROJECT_IMAGE_FILESTEM}.ubi ./release/${RELEASE_FOLDER}/rootfs/.
	ln -srf ./release/${RELEASE_FOLDER}/rootfs/${PROJECT_IMAGE_FILESTEM}.ubi ./release/${RELEASE_FOLDER}/U11/U11.bin
fi
cp -p ./rootfs/U10.bin ./release/${RELEASE_FOLDER}/U10/. 
cp -p ./fpga/* ./release/${RELEASE_FOLDER}/fpga/.

if [ -z "$SKIP_PMENGR_GROUP" ] || [ "$SKIP_PMENGR_GROUP" -eq 0 ]  
then
	echo "Setting image permissions."
	if [ -n "$EMMC_ROOTFS" ] && [ "$EMMC_ROOTFS" -ne 0 ]
	then
		:
	else
		chmod 666 ./release/${RELEASE_FOLDER}/rootfs/fluke-full-image-${PROJECT_MACHINE}.ubi
		chgrp pmengr ./release/${RELEASE_FOLDER}/rootfs/fluke-full-image-${PROJECT_MACHINE}.ubi
	fi
	chgrp pmengr ./release/${RELEASE_FOLDER}/zImage/zImage
	chgrp pmengr ./release/${RELEASE_FOLDER}/U10/U10.bin
	echo "done!"
fi

